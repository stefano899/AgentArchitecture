:- dynamic ho_salutato/1.
:- dynamic ho_aperto/1.
:- dynamic offerte_ricevute/1.
:- dynamic apro/1.
:- dynamic ho_oggetto/1.



sveglio(si).
ho_aperto(no).
ho_oggetto(no).
ho_salutato(no).
offerte_ricevute([]).
apro(0).
bidder(bidder1).
bidder(bidder2).
bidder(bidder3).
proprietario(proprietario).

pronto:- sveglio(si), ho_aperto(no), ho_salutato(no).
prontoI:> sleep(8), write('Ciao a tutti, sono pronto!'), nl, nl, retract(ho_salutato(no)), assert(ho_salutato(si)).

prontoAgE(agente) :> write('Agente: '), write(agente), write('E pronto'), checkA(agente).

richiesta_oggetto:- checkP(agente), ho_salutato(si), ho_oggetto(no).
richiesta_oggettoI:> proprietario(P), write('Adesso richiedo l oggetto da mettere all asta al proprietario...'), nl, messageA(P, send_message(richiesta, Me)).

oggettoE:> write('ho ricevuto oggetto'), retract(ho_oggetto(no)), assert(ho_oggetto(si)).

decido_se_aprire:- checkP(agente), ho_aperto(no), ho_salutato(si), ho_oggetto(si).
decido_se_aprireI:> random(0,4,A), assert(apro(A)), write(A), nl.

sollecito :< checkP(agente).
sollecitoE :> write('Vedo che la gente vuole spendere i propri soldi!'), nl, retract(apro(A)), assert(apro(1)), apro_offerte.

apro_offerte:- ho_salutato(si), apro(A), A == 1, ho_oggetto(si).
apro_offerteI:> write('OFFERTE APERTE'), nl, retract(ho_aperto(no)), assert(ho_aperto(si)), invia_messaggioA.

invia_messaggioA:> bidder(B), messageA(B, send_message(apertura, Me)).


propostaE([H|T]) :> write(H), write(T), nl.

monitoro_offerte:- offerte_ricevute(L), length(L, Len), Len > 0.
monitoro_offerteI:> offerte_ricevute(L), length(L, Len), Len == 3 -> considero_offerteA(L).

considero_offerteA(L) :> nl, write('Ho ricevuto abbastanza offerte...'), verifica_offerte(L).

verifica_offerte([H|T]):- H = (B, O), write(O), 
			(O > 40 -> write('Offerta Adeguata.'), messageA(B, send_message(accettata,Me))), 
			retract(offerte_ricevute([H|T])), assert(offerte_ricevute(T)), length(L, Len),
			(Len > 0 -> verifica_offerte(L);
				Len == 0 -> write('Ho letto le offerte')).

