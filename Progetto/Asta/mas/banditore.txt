:- write('Sono il Banditore!'), nl.
inizioE:> write('goE'),nl,once(k).
k:- retractall(offerte(_)), assert(offerte([])),
messageA(agent1,send_message(isReady,banditore),banditore),
messageA(agent2,send_message(isReady,banditore),banditore),
messageA(agent3,send_message(isReady,banditore),banditore),
messageA(agent4,send_message(isReady,banditore),banditore).
readyE(X):> once(p).
p:-checkA(X), vai.
vai:-once(c).
c:-checkP(X).
vaiI:>once(w).
w:-write('Inizio Asta!'),nl, 
messageA(agent1,send_message(asta,banditore),banditore),
messageA(agent2,send_message(asta,banditore),banditore),
messageA(agent3,send_message(asta,banditore),banditore),
messageA(agent4,send_message(asta,banditore),banditore).
ricezione_offertaE(Offer):>assert(offerte([Offer | OfferteCorrenti])), write('Offerta ricevuta: '), write(Offer), nl, offerteRicevuteA.
conclude_auction:- offerteRicevuteP.
conclude_auctionI:>write('Asta conclusa. Offerte ricevute: '), nl, findall(Offer, offerte(Offer), Offerte), write(Offerte), nl, resetOfferte.
resetOfferte:-retractall(offerte(_)), assert(offerte([])), write('Lista di offerte resettata.'), nl.

%offertaRicevuta:- checkA(Offer),checkA(Offer).
%conclude_auction:- checkP(Offer),checkP(Offer).